require(methods)

if (exists("test.data.table", .GlobalEnv, inherits=FALSE)) {
  if ((tt<-compiler::enableJIT(-1))>0)
    cat("This is dev mode and JIT is enabled (level ", tt, ") so there will be a brief pause around the first test.\n", sep="")
} else {
  require(data.table)
  test = data.table:::test
  mergepair = data.table:::mergepair
  perhaps.data.table = data.table:::perhaps.data.table
  hasindex = data.table:::hasindex
  fdistinct = data.table:::fdistinct
  forderv = data.table:::forderv
}

addresses = function(x) vapply(x, address, "")
copied = function(ans, l) {
  all(!addresses(ans) %chin% c(addresses(l$lhs), addresses(l$rhs)))
}
notcopied = function(ans, l, how="left", unless=character()) {
  if (how %chin% unless) return(copied(ans, l))
  if (how=="full") return( ## either side nocopy is fine
    all(addresses(l$lhs) %chin% addresses(ans)) || all(addresses(l$rhs) %chin% addresses(ans))
  )
  all(addresses(if (how=="right") l$rhs else l$lhs) %chin% addresses(ans))
}

# internal helpers

test(1.01, perhaps.data.table(list()))
test(1.02, perhaps.data.table(list(a=1:2)))
test(1.03, perhaps.data.table(list(a=1:2, b=1:2)))
test(1.04, perhaps.data.table(list(1:2, 1:2)), FALSE)

test(2.01, fdistinct(list(x=c(1L,1:2), b=1:2), on="x", mult="last"), error="must be data.table type object")
test(2.02, fdistinct(data.table(x=c(1L,1:2)), on="z", mult="last"), error="must be character column names of")
test(2.03, fdistinct(data.table(x=c(1L,1:2)), on="x", mult="last", cols=character()), error="must be non-zero length, non-NA, integer or character columns of")
test(2.04, fdistinct(data.table(x=c(1L,1:2, y=1:3)), on="x", mult="last", copy=NA), error="must be TRUE or FALSE")
d = data.table(x=1:2, y=1:2)
test(2.05, ans<-fdistinct(d, on="x", mult="last"), d)
test(2.06, intersect(addresses(ans), addresses(d)), character())
test(2.07, ans<-fdistinct(d, on="x", mult="last", copy=FALSE), d)
test(2.08, addresses(ans), addresses(d))
d = data.table(x=c(2:1,2L), y=1:3)
test(2.09, fdistinct(d, on="x", mult="first"), data.table(x=2:1, y=1:2))
test(2.10, fdistinct(d, on="x", mult="last"), data.table(x=1:2, y=2:3))
setattr(attr(setattr(d, "index", integer()), "index", TRUE), "__x", forderv(d, "x", retGrp=TRUE)) ## retGrp=T index #4386
test(2.11, fdistinct(d, on="x", mult="first"), data.table(x=2:1, y=1:2))

test(3.01, hasindex(d, "x"))
test(3.02, hasindex(d, "x", retGrp=TRUE))
setattr(attr(setattr(d, "index", integer()), "index", TRUE), "__x", forderv(d, "x"))              ## retGrp=F index #4386
test(3.03, hasindex(d, "x"))
test(3.04, !hasindex(d, "x", retGrp=TRUE))
setattr(d, "index", NULL)
test(3.05, !hasindex(d, "x"))
test(3.06, !hasindex(d, "x", retGrp=TRUE))
setattr(d, "index", integer())
test(3.07, !hasindex(d, "x"))
test(3.08, !hasindex(d, "x", retGrp=TRUE))
rm(d)

# cbindlist

l = list(
  d1 = data.table(x=1:3, v1=1L),
  d2 = data.table(y=3:1, v2=2L),
  d3 = data.table(z=2:4, v3=3L)
)
ans = cbindlist(l)
expected = data.table(l$d1, l$d2, l$d3)
test(11.01, ans, expected)
test(11.02, intersect(addresses(ans), addresses(expected)), character())
ans = cbindlist(l, copy=FALSE)
expected = setDT(c(l$d1, l$d2, l$d3))
test(11.03, ans, expected)
test(11.04, length(intersect(addresses(ans), addresses(expected))), ncol(expected))
rm(expected)
# codecov
test(12.01, cbindlist(data.frame(a=1L), data.frame(b=1L)), error="must be a list")
test(12.02, cbindlist(TRUE, FALSE), error="must be a list")
test(12.03, cbindlist(list(), NA), error="must be TRUE or FALSE")
test(12.04, cbindlist(list(data.table(a=1L), 1L)), error="is not of data.table type")
test(12.05, cbindlist(list(data.table(a=1L), data.table(b=1:2)), copy=FALSE), error="has to have equal nrow")
test(12.06, cbindlist(list(data.table(a=1L), data.table(b=1:2))), error="recycling.*not yet implemented")
op = options(datatable.verbose=TRUE)
test(12.07, cbindlist(list(data.table(a=1:2), data.table(b=1:2))), data.table(a=1:2, b=1:2), output="cbindlist.*took")
options(op)
test(12.08, cbindlist(list(data.table(), data.table(a=1:2), data.table(b=1:2))), data.table(a=1:2, b=1:2))
test(12.09, cbindlist(list(data.table(), data.table(a=1:2), list(b=1:2))), data.table(a=1:2, b=1:2))
test(12.10, cbindlist(list(data.table(a=integer()), list(b=integer()))), data.table(a=integer(), b=integer()))

# mergepair

## test copy-ness argument in mergepair

### LHS equal to RHS: no copy in all cases
num = 21.000
l = list(
  lhs = data.table(id1=1:2, v1=1:2),
  rhs = data.table(id1=1:2, v2=1:2)
)
expected = data.table(id1=1:2, v1=1:2, v2=1:2)
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=TRUE), expected) ## copy=TRUE: no shared columns
    test(num<-num+0.001, copied(ans, l))
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=FALSE), expected) ## copy=FALSE: LHS shared but no RHS
    test(num<-num+0.001, notcopied(ans, l, how=how))
  }
}
### RHS includes LHS: no copy in inner, left, right
num = 22.000
unless = "full"
l = list(
  lhs = data.table(id1=1:2, v1=1:2),
  rhs = data.table(id1=1:3, v2=1:3)
)
expected = list(
  inner = data.table(id1=1:2, v1=1:2, v2=1:2),
  left = data.table(id1=1:2, v1=1:2, v2=1:2),
  right = data.table(id1=1:3, v1=c(1:2,NA), v2=1:3),
  full = data.table(id1=1:3, v1=c(1:2,NA), v2=1:3)
)
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=TRUE), expected[[how]])
    test(num<-num+0.001, copied(ans, l))
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=FALSE), expected[[how]])
    test(num<-num+0.001, notcopied(ans, l, how=how, unless=unless))
  }
}
### LHS includes RHS: no copy in left, right, full
num = 23.000
unless = "inner"
l = list(
  lhs = data.table(id1=1:3, v1=1:3),
  rhs = data.table(id1=1:2, v2=1:2)
)
expected = list(
  inner = data.table(id1=1:2, v1=1:2, v2=1:2),
  left = data.table(id1=1:3, v1=1:3, v2=c(1:2,NA)),
  right = data.table(id1=1:2, v1=1:2, v2=1:2),
  full = data.table(id1=1:3, v1=1:3, v2=c(1:2,NA))
)
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=TRUE), expected[[how]])
    test(num<-num+0.001, copied(ans, l))
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=FALSE), expected[[how]])
    test(num<-num+0.001, notcopied(ans, l, how=how, unless=unless))
  }
}
### LHS single nonmatch RHS on both sides: no copy in left, right
num = 24.000
unless = c("inner","full")
l = list(
  lhs = data.table(id1=3:1, v1=1:3),
  rhs = data.table(id1=c(4L,2:1), v2=1:3)
)
expected = list(
  inner = data.table(id1=2:1, v1=2:3, v2=2:3),
  left = data.table(id1=3:1, v1=1:3, v2=c(NA,2:3)),
  right = data.table(id1=c(4L,2:1), v1=c(NA,2:3), v2=1:3),
  full = data.table(id1=c(3:1,4L), v1=c(1:3,NA), v2=c(NA,2:3,1L))
)
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=TRUE), expected[[how]])
    test(num<-num+0.001, copied(ans, l))
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=FALSE), expected[[how]])
    test(num<-num+0.001, notcopied(ans, l, how=how, unless=unless))
  }
}
### LHS zero match RHS: no copy in left, right
num = 25.000
unless = c("inner","full")
l = list(
  lhs = data.table(id1=2:1, v1=1:2),
  rhs = data.table(id1=3:4, v2=1:2)
)
expected = list(
  inner = data.table(id1=integer(), v1=integer(), v2=integer()),
  left = data.table(id1=2:1, v1=1:2, v2=c(NA_integer_,NA)),
  right = data.table(id1=3:4, v1=c(NA_integer_,NA), v2=1:2),
  full = data.table(id1=c(2:1,3:4), v1=c(1:2,NA,NA), v2=c(NA,NA,1:2))
)
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=TRUE), expected[[how]])
    test(num<-num+0.001, copied(ans, l))
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=FALSE), expected[[how]])
    test(num<-num+0.001, notcopied(ans, l, how=how, unless=unless))
  }
}
### LHS and RHS zero nrow: no copies
num = 26.000
unless = character()
l = list(
  lhs = data.table(id1=integer(), v1=integer()),
  rhs = data.table(id1=integer(), v2=integer())
)
expected = list(
  inner = data.table(id1=integer(), v1=integer(), v2=integer()),
  left = data.table(id1=integer(), v1=integer(), v2=integer()),
  right = data.table(id1=integer(), v1=integer(), v2=integer()),
  full = data.table(id1=integer(), v1=integer(), v2=integer())
)
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=TRUE), expected[[how]])
    test(num<-num+0.001, copied(ans, l))
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=FALSE), expected[[how]])
    test(num<-num+0.001, notcopied(ans, l, how=how, unless=unless))
  }
}
### LHS has zero nrow: no copies
num = 27.000
unless = character()
l = list(
  lhs = data.table(id1=integer(), v1=integer()),
  rhs = data.table(id1=2:1, v2=1:2)
)
expected = list(
  inner = data.table(id1=integer(), v1=integer(), v2=integer()),
  left = data.table(id1=integer(), v1=integer(), v2=integer()),
  right = data.table(id1=2:1, v1=c(NA_integer_,NA), v2=1:2),
  full = data.table(id1=2:1, v1=c(NA_integer_,NA), v2=1:2)
)
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=TRUE), expected[[how]])
    test(num<-num+0.001, copied(ans, l))
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=FALSE), expected[[how]])
    test(num<-num+0.001, notcopied(ans, l, how=how, unless=unless))
  }
}
### RHS has zero nrow
num = 28.000
unless = "inner"
l = list(
  lhs = data.table(id1=2:1, v1=1:2),
  rhs = data.table(id1=integer(), v2=integer())
)
expected = list(
  inner = data.table(id1=integer(), v1=integer(), v2=integer()),
  left = data.table(id1=2:1, v1=1:2, v2=c(NA_integer_,NA)),
  right = data.table(id1=integer(), v1=integer(), v2=integer()),
  full = data.table(id1=2:1, v1=1:2, v2=c(NA_integer_,NA))
)
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=TRUE), expected[[how]])
    test(num<-num+0.001, copied(ans, l))
    test(num<-num+0.001, ans <- mergepair(l$lhs, l$rhs, on="id1", how=how, mult=mult, copy=FALSE), expected[[how]])
    test(num<-num+0.001, notcopied(ans, l, how=how, unless=unless))
  }
}

# mergelist

## coverage
test(101.01, mergelist(data.table(x=1L), on="x"), error="must be a list")
test(101.02, mergelist(list(data.table(x=1L)), on="x", copy=NA), error="must be TRUE or FALSE")
test(101.03, mergelist(list(data.table(x=1L)), how="inner", on="x", copy=FALSE), error="works only for")
test(101.04, mergelist(list(data.table(x=1L), list(x=1:2, y=1L)), on="x"), error="must be data.table objects")
l = list(d<-data.table(x=1:2))
test(101.05, ans<-mergelist(l, on="x", how="left", mult="first"), d)
test(101.06, intersect(addresses(d), addresses(ans)), character())
test(101.07, ans<-mergelist(l, on="x", how="left", mult="first", copy=FALSE), d)
test(101.08, addresses(d), addresses(ans))
op = options("datatable.verbose"=TRUE)
test(101.09, mergelist(l, on="x"), d, output="mergelist.*1 table.*took")
options(op)
l = list(data.table(x=1:2), data.table(x=2:3))
test(101.10, mergelist(l, on=character()), error="must be non zero length character")
op = options("datatable.verbose"=TRUE)
test(101.11, mergelist(l, on="x"), data.table(x=1:2), output="mergelist.*2 tables.*took")
options(op)
test(101.12, mergelist(l, on="xx"), error="specify columns to join that are not present in any table")
test(101.13, mergelist(l, on="x", join.many=NA), error="must be TRUE or FALSE")

## missing on argument
l = list(data.table(x=1:2), data.table(x=2:3))
test(102.01, mergelist(l, how="inner"), error="missing and necessary keys are not present")
test(102.02, mergelist(l, how="left"), error="missing and necessary keys are not present")
test(102.03, mergelist(l, how="right"), error="missing and necessary keys are not present")
test(102.04, mergelist(l, how="full"), error="missing and necessary keys are not present")
l = list(data.table(x=1:2, key="x"), data.table(x=2:3))
test(102.11, mergelist(l, how="inner"), data.table(x=2L))
test(102.12, mergelist(l, how="left"), error="missing and necessary keys are not present")
test(102.13, mergelist(l, how="right"), data.table(x=2:3))
test(102.14, mergelist(l, how="full"), data.table(x=1:3))
l = list(data.table(x=1:2), data.table(x=2:3, key="x"))
test(102.21, mergelist(l, how="inner"), data.table(x=2L))
test(102.22, mergelist(l, how="left"), data.table(x=1:2))
test(102.23, mergelist(l, how="right"), error="missing and necessary keys are not present")
test(102.24, mergelist(l, how="full"), data.table(x=1:3))
l = list(data.table(x=1:2, key="x"), data.table(x=2:3, key="x"))
test(102.31, mergelist(l, how="inner"), data.table(x=2L))
test(102.32, mergelist(l, how="left"), data.table(x=1:2))
test(102.33, mergelist(l, how="right"), data.table(x=2:3))
test(102.34, mergelist(l, how="full"), data.table(x=1:3))
l = list(data.table(x=1:2, y=1:2, z=1:2, zz=1:2, key=c("y","x","z","zz")), data.table(a=2:3, b=2:3, x=2:3, y=2:3, key=c("x","y","a")))
test(102.41, mergelist(l, how="inner"), data.table(x=2L, y=2L, z=2L, zz=2L, a=2L, b=2L)) ## key len 2+ to take intersect, and align order, for inner and full
test(102.42, mergelist(l, how="left"), error="specify columns to join that are not present in LHS table")
test(102.43, mergelist(l, how="right"), error="specify columns to join that are not present in RHS table")
test(102.44, mergelist(l, how="full"), data.table(x=1:3, y=1:3, z=c(1:2,NA), zz=c(1:2,NA), a=c(NA,2:3), b=c(NA,2:3)))
l = list(data.table(a=1:2, x=1:2, key=c("x","a")), data.table(x=2:3, y=2:3, z=2:3, key=c("y","x","z")))
test(102.51, mergelist(l, how="inner"), data.table(x=2L, a=2L, y=2L, z=2L)) ## align order to shorter
test(102.52, mergelist(l, how="left"), error="specify columns to join that are not present in LHS table")
test(102.53, mergelist(l, how="right"), error="specify columns to join that are not present in RHS table")
test(102.54, mergelist(l, how="full"), data.table(x=1:3, a=c(1:2,NA), y=c(NA,2:3), z=c(NA,2:3)))

## cols argument
l = list(data.table(id1=1:2, v1=1:2, v2=2:1, key="id1"), data.table(id1=2:3, v3=1:2, v4=2:1, key="id1"))
test(103.01, mergelist(l, how="inner"), data.table(id1=2L, v1=2L, v2=1L, v3=1L, v4=2L))
test(103.02, mergelist(l, how="left"), data.table(id1=1:2, v1=1:2, v2=2:1, v3=c(NA,1L), v4=c(NA,2L)))
test(103.03, mergelist(l, how="right"), data.table(id1=2:3, v1=c(2L,NA), v2=c(1L,NA), v3=1:2, v4=2:1))
test(103.04, mergelist(l, how="full"), data.table(id1=1:3, v1=c(1:2,NA), v2=c(2:1,NA), v3=c(NA,1:2), v4=c(NA,2:1)))
test(103.11, mergelist(l, how="inner", cols="v2"), error="must be a list")
test(103.12, mergelist(l, how="inner", cols=list("v2")), error="must be same length as")
test(103.13, mergelist(l, how="inner", cols=list("v2",2L)), error="must be a list of character vectors.*NULL")
test(103.14, mergelist(l, how="inner", cols=list("v2","v5")), error="specify columns not present in corresponding table")
cols = list(c("v1","v2"), c("v3","v4"))
test(103.21, mergelist(l, how="inner", cols=cols), data.table(id1=2L, v1=2L, v2=1L, v3=1L, v4=2L))
test(103.22, mergelist(l, how="left", cols=cols), data.table(id1=1:2, v1=1:2, v2=2:1, v3=c(NA,1L), v4=c(NA,2L)))
test(103.23, mergelist(l, how="right", cols=cols), data.table(id1=2:3, v1=c(2L,NA), v2=c(1L,NA), v3=1:2, v4=2:1))
test(103.24, mergelist(l, how="full", cols=cols), data.table(id1=1:3, v1=c(1:2,NA), v2=c(2:1,NA), v3=c(NA,1:2), v4=c(NA,2:1)))
cols = list(NULL, c("v3","v4"))
test(103.25, mergelist(l, how="inner", cols=cols), data.table(id1=2L, v1=2L, v2=1L, v3=1L, v4=2L))
test(103.26, mergelist(l, how="left", cols=cols), data.table(id1=1:2, v1=1:2, v2=2:1, v3=c(NA,1L), v4=c(NA,2L)))
test(103.27, mergelist(l, how="right", cols=cols), data.table(id1=2:3, v1=c(2L,NA), v2=c(1L,NA), v3=1:2, v4=2:1))
test(103.28, mergelist(l, how="full", cols=cols), data.table(id1=1:3, v1=c(1:2,NA), v2=c(2:1,NA), v3=c(NA,1:2), v4=c(NA,2:1)))
cols = list(c("v1","v2"), NULL)
test(103.29, mergelist(l, how="inner", cols=cols), data.table(id1=2L, v1=2L, v2=1L, v3=1L, v4=2L))
test(103.30, mergelist(l, how="left", cols=cols), data.table(id1=1:2, v1=1:2, v2=2:1, v3=c(NA,1L), v4=c(NA,2L)))
test(103.31, mergelist(l, how="right", cols=cols), data.table(id1=2:3, v1=c(2L,NA), v2=c(1L,NA), v3=1:2, v4=2:1))
test(103.32, mergelist(l, how="full", cols=cols), data.table(id1=1:3, v1=c(1:2,NA), v2=c(2:1,NA), v3=c(NA,1:2), v4=c(NA,2:1)))
cols = list(NULL, NULL)
test(103.33, mergelist(l, how="inner", cols=cols), data.table(id1=2L, v1=2L, v2=1L, v3=1L, v4=2L))
test(103.34, mergelist(l, how="left", cols=cols), data.table(id1=1:2, v1=1:2, v2=2:1, v3=c(NA,1L), v4=c(NA,2L)))
test(103.35, mergelist(l, how="right", cols=cols), data.table(id1=2:3, v1=c(2L,NA), v2=c(1L,NA), v3=1:2, v4=2:1))
test(103.36, mergelist(l, how="full", cols=cols), data.table(id1=1:3, v1=c(1:2,NA), v2=c(2:1,NA), v3=c(NA,1:2), v4=c(NA,2:1)))
cols = list("v2", NULL)
test(103.41, mergelist(l, how="inner", cols=cols), data.table(id1=2L, v2=1L, v3=1L, v4=2L))
test(103.42, mergelist(l, how="left", cols=cols), data.table(id1=1:2, v2=2:1, v3=c(NA,1L), v4=c(NA,2L)))
test(103.43, mergelist(l, how="right", cols=cols), data.table(id1=2:3, v2=c(1L,NA), v3=1:2, v4=2:1))
test(103.44, mergelist(l, how="full", cols=cols), data.table(id1=1:3, v2=c(2:1,NA), v3=c(NA,1:2), v4=c(NA,2:1)))
cols = list(NULL, "v4")
test(103.45, mergelist(l, how="inner", cols=cols), data.table(id1=2L, v1=2L, v2=1L, v4=2L))
test(103.46, mergelist(l, how="left", cols=cols), data.table(id1=1:2, v1=1:2, v2=2:1, v4=c(NA,2L)))
test(103.47, mergelist(l, how="right", cols=cols), data.table(id1=2:3, v1=c(2L,NA), v2=c(1L,NA), v4=2:1))
test(103.48, mergelist(l, how="full", cols=cols), data.table(id1=1:3, v1=c(1:2,NA), v2=c(2:1,NA), v4=c(NA,2:1)))
cols = list("v2", "v4")
test(103.49, mergelist(l, how="inner", cols=cols), data.table(id1=2L, v2=1L, v4=2L))
test(103.50, mergelist(l, how="left", cols=cols), data.table(id1=1:2, v2=2:1, v4=c(NA,2L)))
test(103.51, mergelist(l, how="right", cols=cols), data.table(id1=2:3, v2=c(1L,NA), v4=2:1))
test(103.52, mergelist(l, how="full", cols=cols), data.table(id1=1:3, v2=c(2:1,NA), v4=c(NA,2:1)))
cols = list(c("id1","v2"), c("id1","v4"))
test(103.61, mergelist(l, how="inner", cols=cols), data.table(id1=2L, v2=1L, v4=2L))
test(103.62, mergelist(l, how="left", cols=cols), data.table(id1=1:2, v2=2:1, v4=c(NA,2L)))
test(103.63, mergelist(l, how="right", cols=cols), data.table(id1=2:3, v2=c(1L,NA), v4=2:1))
test(103.64, mergelist(l, how="full", cols=cols), data.table(id1=1:3, v2=c(2:1,NA), v4=c(NA,2:1)))
cols = list("id1", c("id1","v4"))
test(103.65, mergelist(l, how="inner", cols=cols), data.table(id1=2L, v4=2L))
test(103.66, mergelist(l, how="left", cols=cols), data.table(id1=1:2, v4=c(NA,2L)))
test(103.67, mergelist(l, how="right", cols=cols), data.table(id1=2:3, v4=2:1))
test(103.68, mergelist(l, how="full", cols=cols), data.table(id1=1:3, v4=c(NA,2:1)))
cols = list("id1", "id1")
test(103.69, mergelist(l, how="inner", cols=cols), data.table(id1=2L))
test(103.70, mergelist(l, how="left", cols=cols), data.table(id1=1:2))
test(103.71, mergelist(l, how="right", cols=cols), data.table(id1=2:3))
test(103.72, mergelist(l, how="full", cols=cols), data.table(id1=1:3))

## join.many argument #4383

d = function(n) as.data.table(list(x=rep(1L, n)))
l = list(fm=d(1), to=d(1))
test(104.01, mergelist(l, on="x", how="left"), l$to[l$fm, on="x"])
l = list(fm=d(2), to=d(1))
test(104.02, mergelist(l, on="x", how="left"), l$to[l$fm, on="x"])
test(104.03, mergelist(l, on="x", how="left", mult="error"), l$to[l$fm, on="x", mult="error"]) ## mult="error" has no effect
l = list(fm=d(1), to=d(2))
test(104.04, mergelist(l, on="x", how="left", mult="all"), l$to[l$fm, on="x"])
test(104.05, mergelist(l, on="x", how="left"), error="multiple matches during merge")
test(104.06, l$to[l$fm, on="x", mult="error"], error="multiple matches during merge")
options(datatable.join.many=FALSE)
test(104.07, mergelist(l, on="x", how="left", mult="all"), l$to[l$fm, on="x"]) ## covers !join.many && length(f__)==1L && len__==nrow(x)
options(datatable.join.many=TRUE)
l = list(fm=d(2), to=d(2))
options(datatable.join.many=FALSE)
test(104.08, mergelist(l, on="x", how="left", mult="all"), error="many-to-many join")
test(104.09, l$to[l$fm, on="x"], error="many-to-many join")
options(datatable.join.many=TRUE)
test(104.10, mergelist(l, on="x", how="left", mult="all"), l$to[l$fm, on="x"]) ## join in [ does not stop on cartesian product
l = list(fm=d(3), to=d(1))
test(104.11, mergelist(l, on="x", how="left"), l$to[l$fm, on="x"])
l = list(fm=d(1), to=d(3))
test(104.12, mergelist(l, on="x", how="left", mult="all"), l$to[l$fm, on="x"])
test(104.13, mergelist(l, on="x", how="left"), error="multiple matches during merge")
test(104.14, l$to[l$fm, on="x", mult="error"], error="multiple matches during merge")
l = list(fm=d(3), to=d(2))
options(datatable.join.many=FALSE)
test(104.15, mergelist(l, on="x", how="left", mult="all"), error="many-to-many join")
test(104.16, l$to[l$fm, on="x"], error="many-to-many join")
options(datatable.join.many=TRUE)
test(104.17, l$to[l$fm, on="x"], error="Check for duplicate key values")
test(104.18, mergelist(l, on="x", how="left", mult="all"), l$to[l$fm, on="x", allow.cartesian=TRUE])
l = list(fm=d(2), to=d(3))
options(datatable.join.many=FALSE)
test(104.19, mergelist(l, on="x", how="left", mult="all"), error="many-to-many join")
test(104.20, l$to[l$fm, on="x"], error="many-to-many join")
options(datatable.join.many=TRUE)
test(104.21, l$to[l$fm, on="x"], error="Check for duplicate key values")
test(104.22, mergelist(l, on="x", how="left", mult="all"), l$to[l$fm, on="x", allow.cartesian=TRUE])
l = list(fm=d(3), to=d(3))
options(datatable.join.many=FALSE)
test(104.23, mergelist(l, on="x", how="left", mult="all"), error="many-to-many join")
test(104.24, l$to[l$fm, on="x"], error="many-to-many join")
options(datatable.join.many=TRUE)
test(104.25, l$to[l$fm, on="x"], error="Check for duplicate key values")
test(104.26, mergelist(l, on="x", how="left", mult="all"), l$to[l$fm, on="x", allow.cartesian=TRUE])

## 3+ tables mergelist

### 3 tables
l = list(data.table(id1=3:1, v1=1:3), data.table(id1=2:1, v2=1:2), data.table(id1=3:2, v3=1:2))
test(111.01, mergelist(l, on="id1", how="left"), data.table(id1=3:1, v1=1:3, v2=c(NA,1:2), v3=c(1:2,NA)))
test(111.02, mergelist(l, on="id1", how="inner"), data.table(id1=2L, v1=2L, v2=1L, v3=2L))
test(111.03, mergelist(l, on="id1", how="right"), data.table(id1=3:2, v1=c(NA,2L), v2=c(NA,1L), v3=1:2))
test(111.04, mergelist(l, on="id1", how="full"), data.table(id1=3:1, v1=1:3, v2=c(NA,1:2), v3=c(1:2,NA)))
test(111.05, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(111.06, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))

## mergelist no duplicates

### LHS equal to RHS
l = list(lhs = data.table(id1=1:2, v1=1:2), rhs = data.table(id1=1:2, v2=1:2))
expected = data.table(id1=1:2, v1=1:2, v2=1:2)
test(121.01, mergelist(l, on="id1", how="inner", mult="all"), expected)
test(121.02, mergelist(l, on="id1", how="left", mult="all"), expected)
test(121.03, mergelist(l, on="id1", how="right", mult="all"), expected)
test(121.04, mergelist(l, on="id1", how="full", mult="all"), expected)
test(121.05, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(121.06, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))
### Single match
l = list(lhs = data.table(id1=1:2, v1=1:2), rhs = data.table(id1=c(1L,3L), v2=1:2))
test(121.11, mergelist(l, on="id1", how="inner", mult="all"), data.table(id1=1L, v1=1L, v2=1L))
test(121.12, mergelist(l, on="id1", how="left", mult="all"), data.table(id1=1:2, v1=1:2, v2=c(1L,NA)))
test(121.13, mergelist(l, on="id1", how="right", mult="all"), data.table(id1=c(1L,3L), v1=c(1L,NA), v2=1:2))
test(121.14, mergelist(l, on="id1", how="full", mult="all"), data.table(id1=1:3, v1=c(1:2,NA), v2=c(1L,NA,2L)))
test(121.15, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(121.16, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))
### Two matches
l = list(lhs = data.table(id1=1:3, v1=1:3), rhs = data.table(id1=2:4, v2=1:3))
test(121.21, mergelist(l, on="id1", how="inner", mult="all"), data.table(id1=2:3, v1=2:3, v2=1:2))
test(121.22, mergelist(l, on="id1", how="left", mult="all"), data.table(id1=1:3, v1=1:3, v2=c(NA,1:2)))
test(121.23, mergelist(l, on="id1", how="right", mult="all"), data.table(id1=2:4, v1=c(2:3,NA), v2=1:3))
test(121.24, mergelist(l, on="id1", how="full", mult="all"), data.table(id1=1:4, v1=c(1:3,NA), v2=c(NA,1:3)))
test(121.25, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(121.26, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))
### Zero match
l = list(lhs = data.table(id1=1:2, v1=1:2), rhs = data.table(id1=4:3, v2=1:2))
test(121.31, mergelist(l, on="id1", how="inner", mult="all"), data.table(id1=integer(), v1=integer(), v2=integer()))
test(121.32, mergelist(l, on="id1", how="left", mult="all"), data.table(id1=1:2, v1=1:2, v2=c(NA_integer_,NA)))
test(121.33, mergelist(l, on="id1", how="right", mult="all"), data.table(id1=4:3, v1=c(NA_integer_,NA), v2=1:2))
test(121.34, mergelist(l, on="id1", how="full", mult="all"), data.table(id1=c(1:2,4:3), v1=c(1:2,NA,NA), v2=c(NA,NA,1:2)))
test(121.35, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(121.36, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))
### LHS within RHS
l = list(lhs = data.table(id1=1:4, v1=1:4), rhs = data.table(id1=3:2, v2=1:2))
test(121.41, mergelist(l, on="id1", how="inner", mult="all"), data.table(id1=2:3, v1=2:3, v2=2:1))
test(121.42, mergelist(l, on="id1", how="left", mult="all"), data.table(id1=1:4, v1=1:4, v2=c(NA,2:1,NA)))
test(121.43, mergelist(l, on="id1", how="right", mult="all"), data.table(id1=3:2, v1=3:2, v2=1:2))
test(121.44, mergelist(l, on="id1", how="full", mult="all"), data.table(id1=1:4, v1=1:4, v2=c(NA,2:1,NA)))
test(121.45, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(121.46, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))
### RHS within LHS
l = list(lhs = data.table(id1=3:2, v1=1:2), rhs = data.table(id1=1:4, v2=1:4))
test(121.51, mergelist(l, on="id1", how="inner", mult="all"), data.table(id1=3:2, v1=1:2, v2=3:2))
test(121.52, mergelist(l, on="id1", how="left", mult="all"), data.table(id1=3:2, v1=1:2, v2=3:2))
test(121.53, mergelist(l, on="id1", how="right", mult="all"), data.table(id1=1:4, v1=c(NA,2:1,NA), v2=1:4))
test(121.54, mergelist(l, on="id1", how="full", mult="all"), data.table(id1=c(3:1,4L), v1=c(1:2,NA,NA), v2=c(3:1,4L)))
test(121.55, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(121.56, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))
### RHS zero rows
l = list(lhs = data.table(id1=3:2, v1=1:2), rhs = data.table(id1=integer(), v2=integer()))
test(121.61, mergelist(l, on="id1", how="inner", mult="all"), data.table(id1=integer(), v1=integer(), v2=integer()))
test(121.62, mergelist(l, on="id1", how="left", mult="all"), data.table(id1=3:2, v1=1:2, v2=c(NA_integer_,NA)))
test(121.63, mergelist(l, on="id1", how="right", mult="all"), data.table(id1=integer(), v1=integer(), v2=integer()))
test(121.64, mergelist(l, on="id1", how="full", mult="all"), data.table(id1=3:2, v1=1:2, v2=c(NA_integer_,NA)))
test(121.65, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(121.66, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))
### LHS zero rows
l = list(lhs = data.table(id1=integer(), v1=integer()), rhs = data.table(id1=2:1, v2=1:2))
test(121.71, mergelist(l, on="id1", how="inner", mult="all"), data.table(id1=integer(), v1=integer(), v2=integer()))
test(121.72, mergelist(l, on="id1", how="left", mult="all"), data.table(id1=integer(), v1=integer(), v2=integer()))
test(121.73, mergelist(l, on="id1", how="right", mult="all"), data.table(id1=2:1, v1=c(NA_integer_,NA), v2=1:2))
test(121.74, mergelist(l, on="id1", how="full", mult="all"), data.table(id1=2:1, v1=c(NA_integer_,NA), v2=1:2))
test(121.75, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(121.76, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))
### LHS and RHS zero rows
l = list(lhs = data.table(id1=integer(), v1=integer()), rhs = data.table(id1=integer(), v2=integer()))
expected = data.table(id1=integer(), v1=integer(), v2=integer())
test(121.81, mergelist(l, on="id1", how="inner", mult="all"), expected)
test(121.82, mergelist(l, on="id1", how="left", mult="all"), expected)
test(121.83, mergelist(l, on="id1", how="right", mult="all"), expected)
test(121.84, mergelist(l, on="id1", how="full", mult="all"), expected)
test(121.85, copied(mergelist(l, on="id1", how="left", mult="error", copy=TRUE), l))
test(121.86, notcopied(mergelist(l, on="id1", how="left", mult="error", copy=FALSE), l))

## mergelist duplicate matches, see sqlite.Rraw for tests vs SQLite db

### duplicates in RHS and LHS matched in both sides
num = 221.00
l = list(lhs = data.table(id1=c(1:3,3L), v1=1:4), rhs = data.table(id1=c(1L,1L,3:4), v2=1:4))
expected = list(inner = list(
  all = data.table(id1=c(1L,1L,3L,3L), v1=c(1L,1L,3L,4L), v2=c(1:3,3L)),
  first = data.table(id1=c(1L,3L), v1=c(1L,3L), v2=c(1L,3L)),
  last = data.table(id1=c(1L,3L), v1=c(1L,4L), v2=2:3),
  error = NULL
), left = list(
  all = data.table(id1=c(1L,1:3,3L), v1=c(1L,1:4), v2=c(1:2,NA,3L,3L)),
  first = data.table(id1=c(1:3,3L), v1=1:4, v2=c(1L,NA,3L,3L)),
  last = data.table(id1=c(1:3,3L), v1=1:4, v2=c(2L,NA,3L,3L)),
  error = NULL
), right = list(
  all = data.table(id1=c(1L,1L,3L,3:4), v1=c(1L,1L,3:4,NA), v2=c(1:3,3:4)),
  first = data.table(id1=c(1L,1L,3:4), v1=c(1L,1L,3L,NA), v2=1:4),
  last = data.table(id1=c(1L,1L,3:4), v1=c(1L,1L,4L,NA), v2=1:4),
  error = NULL
), full = list(
  all = data.table(id1=c(1L,1:3,3:4), v1=c(1L,1:4,NA), v2=c(1:2,NA,3L,3:4)),
  first = data.table(id1=1:4, v1=c(1:3,NA), v2=c(1L,NA,3:4)),
  last = data.table(id1=1:4, v1=c(1:2,4L,NA), v2=c(2L,NA,3:4)),
  error = NULL
))
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    if (is.null(expected[[how]][[mult]])) {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), error="multiple matches during merge")
    } else {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), expected[[how]][[mult]])
    }
  }
}

## duplicates in RHS
num = 222.00
l = list(lhs = data.table(id1=1:2, v1=1:2), rhs = data.table(id1=c(2L,2:3), v2=1:3))
expected = list(inner = list(
  all = data.table(id1=c(2L,2L), v1=c(2L,2L), v2=1:2),
  first = data.table(id1=2L, v1=2L, v2=1L),
  last = data.table(id1=2L, v1=2L, v2=2L),
  error = NULL
), left = list(
  all = data.table(id1=c(1:2,2L), v1=c(1:2,2L), v2=c(NA,1:2)),
  first = data.table(id1=1:2, v1=1:2, v2=c(NA,1L)),
  last = data.table(id1=1:2, v1=1:2, v2=c(NA,2L)),
  error = NULL
), right = list(
  all = data.table(id1=c(2L,2:3), v1=c(2L,2L,NA), v2=1:3),
  first = data.table(id1=c(2L,2:3), v1=c(2L,2L,NA), v2=1:3),
  last = data.table(id1=c(2L,2:3), v1=c(2L,2L,NA), v2=1:3),
  error = data.table(id1=c(2L,2:3), v1=c(2L,2L,NA), v2=1:3)
), full = list(
  all = data.table(id1=c(1:2,2:3), v1=c(1:2,2L,NA), v2=c(NA,1:3)),
  first = data.table(id1=c(1:2,3L), v1=c(1:2,NA), v2=c(NA,1L,3L)),
  last = data.table(id1=c(1:2,3L), v1=c(1:2,NA), v2=c(NA,2:3)),
  error = NULL
))
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    if (is.null(expected[[how]][[mult]])) {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), error="multiple matches during merge")
    } else {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), expected[[how]][[mult]])
    }
  }
}

### duplicates in LHS
num = 223.00
l = list(lhs = data.table(id1=c(1:2,2L), v1=1:3), rhs = data.table(id1=2:3, v2=1:2))
expected = list(inner = list(
  all = data.table(id1=c(2L,2L), v1=2:3, v2=c(1L,1L)),
  first = data.table(id1=2L, v1=2L, v2=1L),
  last = data.table(id1=2L, v1=3L, v2=1L),
  error = NULL
), left = list(
  all = data.table(id1=c(1:2,2L), v1=1:3, v2=c(NA,1L,1L)),
  first = data.table(id1=c(1:2,2L), v1=1:3, v2=c(NA,1L,1L)),
  last = data.table(id1=c(1:2,2L), v1=1:3, v2=c(NA,1L,1L)),
  error = data.table(id1=c(1:2,2L), v1=1:3, v2=c(NA,1L,1L))
), right = list(
  all = data.table(id1=c(2L,2:3), v1=c(2:3,NA), v2=c(1L,1:2)),
  first = data.table(id1=2:3, v1=c(2L,NA), v2=1:2),
  last = data.table(id1=2:3, v1=c(3L,NA), v2=1:2),
  error = NULL
), full = list(
  all = data.table(id1=c(1:2,2:3), v1=c(1:3,NA), v2=c(NA,1L,1:2)),
  first = data.table(id1=1:3, v1=c(1:2,NA), v2=c(NA,1:2)),
  last = data.table(id1=1:3, v1=c(1L,3L,NA), v2=c(NA,1:2)),
  error = NULL
))
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    if (is.null(expected[[how]][[mult]])) {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), error="multiple matches during merge")
    } else {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), expected[[how]][[mult]])
    }
  }
}

### duplicates in RHS and LHS, some RHS dups does not have matches in LHS
num = 224.00
l = list(lhs = data.table(id1=c(1:3,3L), v1=1:4), rhs = data.table(id1=c(1L,1L,3:4,4L), v2=1:5))
expected = list(inner = list(
  all = data.table(id1=c(1L,1L,3L,3L), v1=c(1L,1L,3L,4L), v2=c(1:3,3L)),
  first = data.table(id1=c(1L,3L), v1=c(1L,3L), v2=c(1L,3L)),
  last = data.table(id1=c(1L,3L), v1=c(1L,4L), v2=2:3),
  error = NULL
), left = list(
  all = data.table(id1=c(1L,1:3,3L), v1=c(1L,1:4), v2=c(1:2,NA,3L,3L)),
  first = data.table(id1=c(1:3,3L), v1=1:4, v2=c(1L,NA,3L,3L)),
  last = data.table(id1=c(1:3,3L), v1=1:4, v2=c(2L,NA,3L,3L)),
  error = NULL
), right = list(
  all = data.table(id1=c(1L,1L,3L,3L,4L,4L), v1=c(1L,1L,3L,4L,NA,NA), v2=c(1:3,3:5)),
  first = data.table(id1=c(1L,1L,3L,4L,4L), v1=c(1L,1L,3L,NA,NA), v2=1:5),
  last = data.table(id1=c(1L,1L,3L,4L,4L), v1=c(1L,1L,4L,NA,NA), v2=1:5),
  error = NULL
), full = list(
  all = data.table(id1=c(1L,1:3,3:4,4L), v1=c(1L,1:4,NA,NA), v2=c(1:2,NA,3L,3:5)),
  first = data.table(id1=1:4, v1=c(1:3,NA), v2=c(1L,NA,3:4)),
  last = data.table(id1=1:4, v1=c(1:2,4L,NA), v2=c(2L,NA,3L,5L)),
  error = NULL
))
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    if (is.null(expected[[how]][[mult]])) {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), error="multiple matches during merge")
    } else {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), expected[[how]][[mult]])
    }
  }
}

### duplicates in RHS and LHS, some LHS dups does not have matches in RHS
num = 225.00
l = list(lhs = data.table(id1=c(1L,1L,3:4,4L), v1=1:5), rhs = data.table(id1=c(1:3,3L), v2=1:4))
expected = list(inner = list(
  all = data.table(id1=c(1L,1L,3L,3L), v1=c(1:3,3L), v2=c(1L,1L,3:4)),
  first = data.table(id1=c(1L,3L), v1=c(1L,3L), v2=c(1L,3L)),
  last = data.table(id1=c(1L,3L), v1=2:3, v2=c(1L,4L)),
  error = NULL
), left = list(
  all = data.table(id1=c(1L,1L,3L,3L,4L,4L), v1=c(1:3,3:5), v2=c(1L,1L,3L,4L,NA,NA)),
  first = data.table(id1=c(1L,1L,3L,4L,4L), v1=1:5, v2=c(1L,1L,3L,NA,NA)),
  last = data.table(id1=c(1L,1L,3L,4L,4L), v1=1:5, v2=c(1L,1L,4L,NA,NA)),
  error = NULL
), right = list(
  all = data.table(id1=c(1L,1:3,3L), v1=c(1:2,NA,3L,3L), v2=c(1L,1:4)),
  first = data.table(id1=c(1:3,3L), v1=c(1L,NA,3L,3L), v2=1:4),
  last = data.table(id1=c(1:3,3L), v1=c(2L,NA,3L,3L), v2=1:4),
  error = NULL
), full = list(
  all = data.table(id1=c(1L,1L,3L,3:4,4L,2L), v1=c(1:3,3:5,NA), v2=c(1L,1L,3:4,NA,NA,2L)),
  first = data.table(id1=c(1L,3:4,2L), v1=c(1L,3:4,NA), v2=c(1L,3L,NA,2L)),
  last = data.table(id1=c(1L,3:4,2L), v1=c(2:3,5L,NA), v2=c(1L,4L,NA,2L)),
  error = NULL
))
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    if (is.null(expected[[how]][[mult]])) {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), error="multiple matches during merge")
    } else {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), expected[[how]][[mult]])
    }
  }
}

### cartesian match, dups on both sides of match
num = 226.00
l = list(lhs = data.table(id1=c(1L,1:2), v1=1:3), rhs = data.table(id1=c(1L,1L,3L), v2=1:3))
expected = list(inner = list(
  all = data.table(id1=c(1L,1L,1L,1L), v1=c(1L,1:2,2L), v2=c(1:2,1:2)),
  first = data.table(id1=1L, v1=1L, v2=1L),
  last = data.table(id1=1L, v1=2L, v2=2L),
  error = NULL
), left = list(
  all = data.table(id1=c(1L,1L,1L,1L,2L), v1=c(1L,1L,2L,2L,3L), v2=c(1:2,1:2,NA)),
  first = data.table(id1=c(1L,1:2), v1=1:3, v2=c(1L,1L,NA)),
  last = data.table(id1=c(1L,1:2), v1=1:3, v2=c(2L,2L,NA)),
  error = NULL
), right = list(
  all = data.table(id1=c(1L,1L,1L,1L,3L), v1=c(1:2,1:2,NA), v2=c(1L,1:2,2:3)),
  first = data.table(id1=c(1L,1L,3L), v1=c(1L,1L,NA), v2=1:3),
  last = data.table(id1=c(1L,1L,3L), v1=c(2L,2L,NA), v2=1:3),
  error = NULL
), full = list(
  all = data.table(id1=c(1L,1L,1L,1:3), v1=c(1L,1:2,2:3,NA), v2=c(1:2,1:2,NA,3L)),
  first = data.table(id1=1:3, v1=c(1L,3L,NA), v2=c(1L,NA,3L)),
  last = data.table(id1=1:3, v1=c(2L,3L,NA), v2=c(2L,NA,3L)),
  error = NULL
))
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    if (is.null(expected[[how]][[mult]])) {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), error="multiple matches during merge")
    } else {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), expected[[how]][[mult]])
    }
  }
}

### cross join duplicates
num = 227.00
l = list(lhs = data.table(id1=c(1L,1L), v1=1:2), rhs = data.table(id1=c(1L,1L), v2=1:2))
expected = list(inner = list(
  all = data.table(id1=c(1L,1L,1L,1L), v1=c(1L,1:2,2L), v2=c(1:2,1:2)),
  first = data.table(id1=1L, v1=1L, v2=1L),
  last = data.table(id1=1L, v1=2L, v2=2L),
  error = NULL
), left = list(
  all = data.table(id1=c(1L,1L,1L,1L), v1=c(1L,1:2,2L), v2=c(1:2,1:2)),
  first = data.table(id1=c(1L,1L), v1=1:2, v2=c(1L,1L)),
  last = data.table(id1=c(1L,1L), v1=1:2, v2=c(2L,2L)),
  error = NULL
), right = list(
  all = data.table(id1=c(1L,1L,1L,1L), v1=c(1:2,1:2), v2=c(1L,1:2,2L)),
  first = data.table(id1=c(1L,1L), v1=c(1L,1L), v2=1:2),
  last = data.table(id1=c(1L,1L), v1=c(2L,2L), v2=1:2),
  error = NULL
), full = list(
  all = data.table(id1=c(1L,1L,1L,1L), v1=c(1L,1:2,2L), v2=c(1:2,1:2)),
  first = data.table(id1=1L, v1=1L, v2=1L),
  last = data.table(id1=1L, v1=2L, v2=2L),
  error = NULL
))
for (how in c("inner","left","right","full")) {
  num = trunc(num*10)/10 + 0.1
  for (mult in c("all","first","last","error")) {
    num = trunc(num*100)/100 + 0.01
    if (is.null(expected[[how]][[mult]])) {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), error="multiple matches during merge")
    } else {
      test(num<-num+0.001, mergelist(l, on="id1", how=how, mult=mult), expected[[how]][[mult]])
    }
  }
}

## test exceeding overalloc for a table

## SQLite reference tests can be launched via

### Rscript -e 'install.packages(c("DBI","RSQLite"), repos="https://jangorecki.gitlab.io/rsqlite")'
### Rscript inst/tests/sqlite.Rraw
